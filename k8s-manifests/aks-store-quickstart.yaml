---
apiVersion: v1
kind: Namespace
metadata:
  name: application
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: application
data:
  RABBITMQ_DEFAULT_USER: rmuser
  RABBITMQ_DEFAULT_PASS: rmpassword
  RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,error}]
    disk_free_limit 2147483648
  AMQP_URL: amqp://rabbitmq?connection_attempts=5&retry_delay=5
  RMQ_ADDRESS: amqp://rmuser:rmpassword@rabbitmq:5672
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  PGDATA: /data/postgres
  SMTP_HOST: smtp-relay.brevo.com
  SMTP_USERNAME: myusername@gmail.com
  SMTP_PASSWORD: mypassword
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: application
spec:
  capacity:
    storage: 1Gi
  accessModes: [ReadWriteOnce]
  hostPath:
    path: /mnt/data/postgres
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: application
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
  namespace: application
spec:
  capacity:
    storage: 1Gi
  accessModes: [ReadWriteOnce]
  hostPath:
    path: /mnt/data/redis
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: application
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: forsebekacr.azurecr.io/postgres
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: app-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-api
  namespace: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-api
  template:
    metadata:
      labels:
        app: app-api
    spec:
      containers:
        - name: app-api
          image: forsebekacr.azurecr.io/task-tracker-api
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: app-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-email-sender
  namespace: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-email-sender
  template:
    metadata:
      labels:
        app: app-email-sender
    spec:
      containers:
        - name: app-email-sender
          image: forsebekacr.azurecr.io/task-tracker-email-sender
          envFrom:
            - configMapRef:
                name: app-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-scheduler
  namespace: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-scheduler
  template:
    metadata:
      labels:
        app: app-scheduler
    spec:
      containers:
        - name: app-scheduler
          image: forsebekacr.azurecr.io/task-tracker-scheduler
          envFrom:
            - configMapRef:
                name: app-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: forsebekacr.azurecr.io/redis
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /data
              name: redis-storage
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: forsebekacr.azurecr.io/rabbitmq
          ports:
            - containerPort: 5672
            - containerPort: 15672
          envFrom:
            - configMapRef:
                name: app-config
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: rabbitmq-storage
      volumes:
        - name: rabbitmq-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: application
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: app-api
  namespace: application
spec:
  ports:
    - port: 8080
  selector:
    app: app-api
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: application
spec:
  ports:
    - port: 6379
  selector:
    app: redis
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: application
spec:
  ports:
    - name: amqp
      port: 5672
    - name: management
      port: 15672
  selector:
    app: rabbitmq
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: elasticsearch-pv
  namespace: application
spec:
  capacity:
    storage: 1Gi
  accessModes: [ReadWriteOnce]
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: /mnt/data/elasticsearch
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-pvc
  namespace: application
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
          ports:
            - containerPort: 9200
            - containerPort: 9300
          env:
            - name: discovery.type
              value: single-node
          volumeMounts:
            - name: elasticsearch-storage
              mountPath: /usr/share/elasticsearch/data
      volumes:
        - name: elasticsearch-storage
          persistentVolumeClaim:
            claimName: elasticsearch-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: application
spec:
  ports:
    - port: 9200
  selector:
    app: elasticsearch
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: application
data:
  fluent.conf: |-
    <source>
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers.log.pos
      time_format %Y-%m-%dT%H:%M:%S.%NZ
      tag kubernetes.*
      format json
      read_from_head true
    </source>
    <filter kubernetes.**>
      @type kubernetes_metadata
    </filter>
    <match **>
      @type elasticsearch
      host elasticsearch
      port 9200
      logstash_format true
      logstash_prefix fluentd
      include_tag_key true
      type_name access_log
    </match>
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: application
spec:
  selector:
    matchLabels:
      app: fluentd
  template:
    metadata:
      labels:
        app: fluentd
    spec:
      containers:
        - name: fluentd
          image: fluent/fluentd:v1.12-debian-1
          env:
            - name: FLUENTD_ARGS
              value: --no-supervisor -q
          volumeMounts:
            - name: varlog
              mountPath: /var/log
            - name: config-volume
              mountPath: /fluentd/etc
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
        - name: config-volume
          configMap:
            name: fluentd-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: docker.elastic.co/kibana/kibana:7.13.2
          ports:
            - containerPort: 5601
          env:
            - name: ELASTICSEARCH_URL
              value: http://elasticsearch:9200
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: application
spec:
  ports:
    - port: 5601
  selector:
    app: kibana
